const WebSocket = require('ws');  //данный ws- установлен по npm на "серверную часть".

//сервер-агрегатор сокетов,
// его адрес "ws://localhost:3000"
const server = new WebSocket.Server({port: 3000});

// server.on('connection' - срабатывает, когда кто-то подключается к серверу-агрегатору (или при перезагрузке страницы)
//ws - это сокет, получаемый сервером от ДАННОГО ПОДКЛЮЧАЮЩЕГОСЯ клиента,
//ws генерируется броузером конкретного клиента
// ws.close() - отключает ДАННОГО клиента
// а подключение ws клиента - проходит неявно (?)
// ws.send('Добро пожаловать!')  - шлем ДАННОМУ, постучавшемуся на сервер через событие сервера "server.on('connection', клиенту"

// server.clients- ТИПО(!) массив всех подключенных к серверу клиентов
// server.clients[5].readyState === WebSocket.OPEN  - когда сокет данного(№4) клиента обслуживается сервером
// server.clients[n].send("тебе привет от №5") - шлем указанному клиенту(№n) сообщение
// однако server.clients- не [], хотя и перебирается by forEach'ем

server.on('connection', ws => {
  ws.on('message', message => {   //получаемое сервером сообщение от клиента
    if (message === 'exit') {    //если текст сообщения от клиента - "exit", то отключить ДАННОГО клиента
      ws.close()
    } else {                  //иначе- полученное от клиента сообщение разошлем всем остальным клиентам
      server.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) { //если у клиента подключен сокет
          client.send(message)                      //пошлем всем остальным клиентам из массива всех клиентов сообщение
        }
      })
    }
  })

  ws.send('Добро пожаловать!')   //шлем ДАННОМУ, постучавшемуся на сервер клиенту
});



// вообще-то server.clients- не [], a Set{WebSocket{}, WebSocket{}, ...},
// а в значении readyState стоит не WebSocket.OPEN, а 1
// причем все продолжает работать и если написать
// if (client.readyState === 1) {
//   client.send(message)
// }

// но если поставить !1 или !WebSocket.OPEN, то слать остальным перестает в обеих случаях ))






